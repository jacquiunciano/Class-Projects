/** Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA. **/

select * from city
where population > 100000
and countrycode="USA";

/** Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA. **/

select name from city
where population>120000
and countrycode="USA";

/** Query all columns (attributes) for every row in the CITY table. **/

select * from city;

/** Query all columns for a city in CITY with the ID 1661. **/

select * from city
where ID=1661;

/** Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN. **/

select * from city
where countrycode="JPN";

/** Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN. **/

select name from city
where countrycode="JPN";

/** Query a list of CITY and STATE from the STATION table. **/

select city, state from station;

/** Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer. 88/

select distinct city from station
where ID%2=0;

/** Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table. **/

select  count(city)-count(distinct city)
from station;

/** Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically. **/

select city, length(city) from station 
order by length(city), city limit 1;
select city, length(city) from station 
order by length(city) desc, city limit 1;

/** Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates. **/

select distinct city from station
where substr(city, 1, 1) in ('A', 'E', 'I', 'O', 'U');

/** Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates. **/

select distinct city from station
where right(city,1) in ('a', 'e', 'i', 'o', 'u');

/** Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
Your result cannot contain duplicates. **/

select distinct city from station
where lower(left(city,1)) in ('a', 'e', 'i', 'o', 'u')
and right(city,1) in ('a', 'e', 'i', 'o', 'u');

/** Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates. **/

select distinct city from station
where lower(left(city,1)) not in ('a', 'e', 'i', 'o', 'u');

/** Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates. **/

select distinct city from station
where right(city,1) not in ('a', 'e', 'i', 'o', 'u');

/** Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates. **/

select distinct city from station
where lower(left(city,1)) not in ('a', 'e', 'i', 'o', 'u')
or right(city,1) not in ('a', 'e', 'i', 'o', 'u');

/** Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates. **/

select distinct city from station
where lower(left(city,1)) not in ('a', 'e', 'i', 'o', 'u')
and right(city,1) not in ('a', 'e', 'i', 'o', 'u');

/** Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID. **/

select name from students
where marks>75
order by right(name,3), id asc;

/** Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order. **/

select name from employee
order by name asc;

/** Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than 2000
per month who have been employees for less than 10 months. Sort your result by ascending employee_id. **/

select name from employee
where salary>2000
and months<10
order by employee_id asc;

/** Query the average population for all cities in CITY, rounded down to the nearest integer. **/

select floor(avg(population)) from city;

/** Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN. **/

select sum(population) from city
where countrycode='JPN';

/** Query the difference between the maximum and minimum populations in CITY. **/

select max(population)-min(population) from city;

/** Samantha was tasked with calculating the average monthly salaries for all employees in the 
EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. 
She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.
Write a query calculating the amount of error and round it up to the next integer. **/

select cast(ceiling(avg(cast(salary as float)) - avg(cast(replace(salary,0,'') as float))) as int)
from employees;

/** We define an employee's total earnings to be their monthly salary * months worked, and the maximum total earnings to be the maximum total earnings for 
any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have 
maximum total earnings. Then print these values as  space-separated integers. **/

select max(months*salary), count(employee_id) from employee 
where (months*salary)=(select max(months * salary) from employee);

/** Query the following two values from the STATION table:
1. The sum of all values in LAT_N rounded to a scale of 2 decimal places.
2. The sum of all values in LONG_W rounded to a scale of 2 decimal places. **/

select cast(round(sum(lat_n),2) as numeric(18,2)), cast(round(sum(long_w),2) as numeric(18,2))
from station;

/** Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. 
Truncate your answer to 4 decimal places. **/

select cast(round(sum(lat_n),4) as numeric(30,4))
from station
where lat_n > 38.7880
and lat_n < 137.2345;

/** Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to  decimal places. **/

select cast(round(max(lat_n),4) as numeric(30,4))
from station
where lat_n < 137.2345;

/** Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. 
Round your answer to 4 decimal places. **/

select cast(round(long_w, 4) as numeric(20,4))
from station
where lat_n = (select max(lat_n)
              from station
              where lat_n < 137.2345);

/** Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places. **/

select cast(round(min(lat_n),4) as numeric(20,4))
from station
where lat_n > 38.7780;
 /** Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. 
 Round your answer to 4 decimal places. **/

select cast(round(long_w, 4) as numeric(20,4))
from station
where lat_n = (select min(lat_n)
              from station
              where lat_n > 38.7780);

/** Consider p1(a,b) and p2(c,d) to be two points on a 2D plane.

a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
d happens to equal the maximum value in Western Longitude (LONG_W in STATION).

Query the Manhattan Distance between points p1 and p2 and round it to a scale of 4 decimal places. **/

select cast(round((max(lat_n)-min(lat_n))+(max(long_w)-min(long_w)),4) as numeric(20,4))
from station;

/** Consider p1=(a,c) and p2=(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and 
(c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION. **/

select cast(
    round(
        sqrt(power(max(lat_n)-min(lat_n),2)+power(max(long_w)-min(long_w),2)),4
    )
as numeric(20,4))
from station;

/** A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) 
from STATION and round your answer to 4 decimal places. **/

select cast(round(s.lat_n,4) as numeric(20,4))
from station s
where (select count(lat_n)
      from station
      where lat_n < s.lat_n) = 
      (select count(lat_n)
      from station
      where lat_n > s.lat_n);
      













































